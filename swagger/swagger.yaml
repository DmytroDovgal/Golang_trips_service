swagger: "2.0"
info:
  title: "Team project Service API"
  version: "1.0.0"
schemes:
  - "http"
host: "localhost:8080"
basePath: "/api/v1"
produces:
  - "application/json"
consumes:
  - "application/json"
paths:
  /hello/{name}:
    get:
      summary: "Hello message test"
      tags:
        - "HelloMessage"
      parameters:
        - name: "name"
          in: "path"
          required: true
          type: "string"
      responses:
        '200':
          description: "Message is successful"
          schema:
            $ref: "#/definitions/HelloMessage"
        '404':
          description: "Failed"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /register:
    post:
      summary: "Register new user"
      tags:
        - "create"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          description: "User object tha needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        '500':
          description: "Internal server error with db"
          schema:
            $ref: '#/definitions/Response'
        '406':
          description: "Registration not allowed"
          schema:
            $ref: "#/definitions/ErrorMessage"
        '200':
          description: "User was registered successfully"
          schema:
            $ref: "#/definitions/User"
  /login:
    post:
      summary: "User logs in"
      tags:
        - "log in"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          description: "User credentials to log in"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
       '500':
           description: "Error with redis/postgres db"
           schema:
             $ref: "#/definitions/Response"
         '401':
           description: "User is not registered or entered invalid credentials"
           schema:
             $ref: "#/definitions/Response"
         '200':
           description: "User logged in"
           schema:
             $ref: "#/definitions/Login"
           headers:
             Set-Cookie:
               schema:
                 type: "string"
  /logout:
    post:
      summary: "Logging out"
      tags:
       - "log out"
      parameters:
        - name: "Cookie"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        '500':
          description: "Internal server error with database"
          schema:
            $ref: "#/definitions/Response"
        '204':
          description: "User was logged out successfully"
  /users:
    get:
      summary: "Get all users from database"
      responses:
        '204':
          description: "No users in database to return"
          schema:
            $ref: "#/definitions/Response"
        '200':
          description: "Got list of users"
          schema:
            $ref: "#/definitions/Users"
  /user/:id:
    delete:
      summary: "Delete user from database"
      tags:
       - "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        '500':
          description: "Internal server error with database"
          schema:
            $ref: "#/definitions/Response"
        '404':
          description: "User was not found in database"
          schema:
            $ref: "#/definitions/Response"
        '200':
          description: "User was deleted successfully"
          schema:
            $ref: "#/definitions/Response"
    update:
      summary: "Update user in database"
      tags:
        - "log out"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        '500':
          description: "Internal server error with database"
          schema:
            $ref: "#/definitions/Response"
        '404':
          description: "User was not found in database"
          schema:
            $ref: "#/definitions/Response"
        '200':
          description: "User was updated successfully"
          schema:
            $ref: "#/definitions/User"
definitions:
  HelloMessage:
    type: "object"
    properties:
      name:
        type: "string"
        description: "User name"
  User:
    type: "object"
    properties:
      ID:
        type: "uuid"
      Name:
        type: "string"
      Surname:
        type: "string"
      Login:
        type: "string"
      Password:
        type: "string"
      Email:
        type: "string"
  Users:
    type: "array"
    items:
      $ref: "#definitions/User"
  Response:
    type: "object"
    properties:
      ResponseBody:
        type: "interface"
        description: "Response generated due to the request: empty interface or string message"
  Login:
    type: "object"
    properties:
      Login:
        type: "string"
      Password:
        type: "string"
  ErrorMessage:
    type: "object"
    properties:
      Message:
        type: "string"
        description: "Error message"
