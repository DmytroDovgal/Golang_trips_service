// Code generated by MockGen. DO NOT EDIT.
// Source: team-project/database (interfaces: ITrain)

// Package mock_database is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	data "team-project/services/data"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockITrain is a mock of ITrain interface
type MockITrain struct {
	ctrl     *gomock.Controller
	recorder *MockITrainMockRecorder
}

// MockITrainMockRecorder is the mock recorder for MockITrain
type MockITrainMockRecorder struct {
	mock *MockITrain
}

// NewMockITrain creates a new mock instance
func NewMockITrain(ctrl *gomock.Controller) *MockITrain {
	mock := &MockITrain{ctrl: ctrl}
	mock.recorder = &MockITrainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITrain) EXPECT() *MockITrainMockRecorder {
	return m.recorder
}

// AddTrain mocks base method
func (m *MockITrain) AddTrain(arg0 data.Train) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrain indicates an expected call of AddTrain
func (mr *MockITrainMockRecorder) AddTrain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrain", reflect.TypeOf((*MockITrain)(nil).AddTrain), arg0)
}

// DeleteTrain mocks base method
func (m *MockITrain) DeleteTrain(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrain indicates an expected call of DeleteTrain
func (mr *MockITrainMockRecorder) DeleteTrain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrain", reflect.TypeOf((*MockITrain)(nil).DeleteTrain), arg0)
}

// GetAllTrains mocks base method
func (m *MockITrain) GetAllTrains() ([]data.Train, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTrains")
	ret0, _ := ret[0].([]data.Train)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTrains indicates an expected call of GetAllTrains
func (mr *MockITrainMockRecorder) GetAllTrains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTrains", reflect.TypeOf((*MockITrain)(nil).GetAllTrains))
}

// GetTrain mocks base method
func (m *MockITrain) GetTrain(arg0 string) (data.Train, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrain", arg0)
	ret0, _ := ret[0].(data.Train)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrain indicates an expected call of GetTrain
func (mr *MockITrainMockRecorder) GetTrain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrain", reflect.TypeOf((*MockITrain)(nil).GetTrain), arg0)
}

// UpdateTrain mocks base method
func (m *MockITrain) UpdateTrain(arg0 uuid.UUID, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrain", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrain indicates an expected call of UpdateTrain
func (mr *MockITrainMockRecorder) UpdateTrain(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrain", reflect.TypeOf((*MockITrain)(nil).UpdateTrain), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
